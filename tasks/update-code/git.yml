---
# Ansible in English:
# Inspect two variables for a non-empty value, then omit opposite the module parameter.
- name: ANSISTRANO | GIT | Deliver SSH deployment key
  copy:
    content: "{{ (item.key == 'content')|ternary(item.value, omit) }}"
    src: "{{ (item.key == 'src')|ternary(item.value, omit) }}"
    dest: "{{ ansistrano_deploy_to }}/git_identity_key"
    mode: 0400
  no_log: True
  with_dict:
    src: "{{ ansistrano_git_identity_key_path }}"
    content: "{{ ansistrano_git_identity_key_content }}"
  when: item.value|trim != ""

- name: ANSISTRANO | GIT | Detect SSH key for deployment
  stat:
    path: "{{ ansistrano_deploy_to }}/git_identity_key"
  register: ansistrano_git_ssh_key

- name: ANSISTRANO | GIT | Update remote repository
  git:
    repo: "{{ ansistrano_git_repo }}"
    dest: "{{ ansistrano_deploy_to }}/repo"
    version: "{{ ansistrano_git_branch }}"
    accept_hostkey: true
    update: yes
    force: yes
    refspec: "{{ ansistrano_git_refspec | default(omit) }}"
  register: ansistrano_git_result_update
  when: ansistrano_git_ssh_key.stat.exists != True

- name: ANSISTRANO | GIT | Update remote repository using SSH key
  git:
    repo: "{{ ansistrano_git_repo }}"
    dest: "{{ ansistrano_deploy_to }}/repo"
    version: "{{ ansistrano_git_branch }}"
    accept_hostkey: true
    update: yes
    force: yes
    refspec: "{{ ansistrano_git_refspec | default(omit) }}"
    key_file: "{{ ansistrano_deploy_to }}/git_identity_key"
  register: ansistrano_git_result_update_ssh
  when: ansistrano_git_ssh_key.stat.exists

- name: ANSISTRANO | GIT | Register ansistrano_git_result variable
  set_fact: ansistrano_git_result={{ ansistrano_git_result_update_ssh if ansistrano_git_result_update|skipped else ansistrano_git_result_update }}

- name: ANSISTRANO | GIT | Shred GIT deployment key
  command: shred -f -u "{{ ansistrano_deploy_to }}/git_identity_key"
  when: ansistrano_git_ssh_key.stat.exists

- name: ANSISTRANO | GIT | Set git_real_repo_tree
  set_fact:
    ansistrano_git_real_repo_tree: "{{ ansistrano_git_repo_tree | trim | regex_replace('^[/]*', '') | regex_replace('[/]*$', '') }}"

- name: ANSISTRANO | GIT | Create release folder
  file:
    state: directory
    path: "{{ ansistrano_release_path.stdout }}"

- name: ANSISTRANO | GIT | Sync repo subtree["{{ ansistrano_git_real_repo_tree }}"] to release path
  shell: >-
           {
             git ls-files -z --with-tree="{{ ansistrano_git_branch }}" | tr '\0' '\n';
             git submodule foreach --recursive --quiet 'git ls-files -z --with-tree="$sha1" | tr "\0" "\n" | sed "s#^#$path/#"';
           }
           | grep "^$prefix"
           | sed "s#^$prefix/##"
           | rsync -a --files-from=- "./$prefix/" {{ ansistrano_release_path.stdout }}/
  args:
    chdir: "{{ ansistrano_deploy_to }}/repo/"
  environment:
    prefix: "{{ ansistrano_git_real_repo_tree }}"
